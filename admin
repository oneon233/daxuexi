{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Kill Watermark","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"compat_powerful_this":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://*.818ps.com/*","https://www.eqxiu.com/*","https://www.chuangkit.com/*","https://bigesj.com/*","https://www.gaoding.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1661936236480,"data":{}},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/424302-kill-watermark/code/Kill%20Watermark.user.js","uuid":"d9200af3-fae6-4551-9caa-c143015fd46b","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBLaWxsIFdhdGVybWFyawovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvemgtQ04vdXNlcnMvNzUzNjIzLWFjaGVuZ292bwovLyBAdmVyc2lvbiAgICAgIDEuNAovLyBAZGVzY3JpcHRpb24gIOaUr+aMgeWOu+mZpOWbvuaAquWFveOAgeaYk+S8geengOOAgeWIm+Wuoui0tOOAgeavlOagvOiuvuiuoeOAgeeov+WumuiuvuiuoeWbvueJh+awtOWNsO+8jOWbvueJh+iuvuiuoeWujOaIkOWQju+8jOeCueWHu+W3puS4iuinkuKAnOWOu+mZpOawtOWNsOKAneaMiemSru+8jOawtOWNsOWOu+mZpOWQjuaIquWbvuWNs+WPr+OAggovLyBAYXV0aG9yICAgICAgIOmYv+aIkAovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vZnRwLmJtcC5vdmgvaW1ncy8yMDIxLzA0LzBkOTM0MmU1ODNjYTJhZGIucG5nCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly8qLjgxOHBzLmNvbS8qCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly93d3cuZXF4aXUuY29tLyoKLy8gQG1hdGNoICAgICAgICBodHRwczovL3d3dy5jaHVhbmdraXQuY29tLyoKLy8gQG1hdGNoICAgICAgICBodHRwczovL2JpZ2Vzai5jb20vKgovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vd3d3Lmdhb2RpbmcuY29tLyoKLy8gQHJlcXVpcmUgICAgICBodHRwczovL2Nkbi5ib290Y3NzLmNvbS9qcXVlcnkvMy4zLjEvanF1ZXJ5Lm1pbi5qcwovLyBAZ3JhbnQgICAgICAgIHVuc2FmZVdpbmRvdwovLyA9PS9Vc2VyU2NyaXB0PT0KKGZ1bmN0aW9uKCAkICkgewogICAgdmFyIGJ0bj0iPGRpdiBzdHlsZT0nd2lkdGg6IDgwcHg7IGhlaWdodDogMzBweDsgcG9zaXRpb246IGZpeGVkOyB0b3A6IDA7IGxlZnQ6IDA7IHotaW5kZXg6IDk5OTk5O292ZXJmbG93OiB2aXNpYmxlOyc+PGJ1dHRvbiBpZD0ncWNzeScgc3R5bGU9J2JhY2tncm91bmQtY29sb3I6IHJnYmEoNzAsIDE5NiwgMzgsIDAuNik7IHdpZHRoOiA4MHB4O2hlaWdodDogMzBweDtjb2xvcjpyZWQ7Jz7ljrvpmaTmsLTljbA8L2J1dHRvbj48L2Rpdj4iOwogICAgJCgiYm9keSIpLnByZXBlbmQoYnRuKTsKICAgICQoImJ1dHRvbiNxY3N5IikuY2xpY2soZnVuY3Rpb24oKXsKICAgICAgICB2YXIgdGl0PWRvY3VtZW50LnRpdGxlOwogICAgICAgIGlmICgvKOWbvuaAquWFvSkvLnRlc3QodGl0KSkgewogICAgICAgICAgICAkKCJkaXYiKS5yZW1vdmUoIi5pbWFnZS13YXRlcm1hcmsiKTsKICAgICAgICB9ZWxzZSBpZiAoLyjmmJPkvIHnp4ApLy50ZXN0KHRpdCkpIHsKICAgICAgICAgICAgJCgiZGl2LmVxYy13YXRlcm1hcmsiKS5jc3MoInBvc2l0aW9uIiwnc3RhdGljJyk7CiAgICAgICAgfWVsc2UgaWYgKC8o5Yib5a6i6LS0KS8udGVzdCh0aXQpKSB7CiAgICAgICAgICAgICQoImRpdltzdHlsZSo9J2NrdC13YXRlcm1hcmsnXSIpLnJlbW92ZSgpOwogICAgICAgICAgICAkKCJkaXYiKS5yZW1vdmUoIi50ZW1wbGF0ZVdhdGVyTWFyayIpOwogICAgICAgIH1lbHNlIGlmICgvKOavlOagvOiuvuiuoSkvLnRlc3QodGl0KSkgewogICAgICAgICAgICAkKCJkaXYud2F0ZXIiKS5jc3MoInBvc2l0aW9uIiwnc3RhdGljJyk7CiAgICAgICAgICAgICQoImRpdi50b29sLWJhci1jb250YWluZXIiKS5yZW1vdmUoKTsKICAgICAgICB9ZWxzZSBpZiAoLyjnqL/lrprorr7orqEpLy50ZXN0KHRpdCkpIHsKICAgICAgICAgICAgdmFyIGdhb2Rpbmc9IjxzdHlsZT4uZWRpdG9yLXdhdGVybWFya3twb3NpdGlvbjogc3RhdGljO3otaW5kZXg6LTk5OX08L3N0eWxlPiI7CiAgICAgICAgICAgICQoImJvZHkiKS5wcmVwZW5kKGdhb2RpbmcpOwogICAgICAgICAgICAkKCJkaXYucmVtb3ZlLXdhdGVybWFyayIpLnJlbW92ZSgpOwogICAgICAgIH0KICAgIH0pOwp9KSggalF1ZXJ5ICk7","requires":[{"meta":{"name":"jquery.min.js","url":"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js","ts":1661936236469,"mimetype":"text/javascript"},"source":""}]},{"name":"Image Downloader","options":{"check_for_updates":false,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"compat_powerful_this":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":["*"],"merge_includes":true,"use_matches":[],"orig_matches":["*","https://www.bilibili.com/","https://588ku.com/"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":["wx.qlogo.cn","dss0.bdstatic.com","pss.bdstatic.com","dancf-st0.oss-cn-hangzhou.aliyuncs.com","static-ud.udesk.cn","gd-filems.dancf.com","st-gdx.dancf.com","st0.dancf.com","p6-sign.bdxiguaimg.com","p26-sign.bdxiguaimg.com","mmbiz.qpic.cn","upload-images.jianshu.io","5b0988e595225.cdn.sohucs.com","sucimg.itc.cn","03e1181bba1cf.cdn.sohucs.com","www.jia360.com","tencentjiaju.img-cn-beijing.aliyuncs.com","qq.com","himg.bdimg.com","icon.cnzz.com","s.maigoo.com","image.maigoo.com","image4.cnpp.cn","appimg.ncut.edu.cn","gtimg.cn","zcool.cn","image.gogoup.com","588ku.com","huabanimg.com","aliyuncs.com","t3.chei.com.cn","chuangkit.com","shenzan.com","mianfeiziti.com","q.qlogo.cn","bpic.51yuansu.com","icon.51yuansu.com","thirdqq.qlogo.cn","php.cn","jonypractic.net","puui.qpic.cn","tju.edu.cn","ustb.edu.cn","huaban.com"],"orig_connects":["*"],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-end","orig_noframes":null}},"storage":{"ts":1661936236451,"data":{}},"enabled":true,"position":2,"uuid":"080f2636-6a1e-452c-966a-9906aaed621a","source":"","requires":[{"meta":{"name":"hotkeys.min.js","url":"https://cdn.jsdelivr.net/npm/hotkeys-js@3.7.2/dist/hotkeys.min.js","ts":1661936236433,"mimetype":"text/javascript"},"source":"LyohIGhvdGtleXMtanMgdjMuNy4yIHwgTUlUIChjKSAyMDE5IGtlbm55IHdvbmcgPHdvd29ob29AcXEuY29tPiB8IGh0dHA6Ly9qYXl3Y2psb3ZlLmdpdGh1Yi5pby9ob3RrZXlzICovCiFmdW5jdGlvbihlLHQpeyJvYmplY3QiPT10eXBlb2YgZXhwb3J0cyYmInVuZGVmaW5lZCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOiJmdW5jdGlvbiI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKHQpOihlPWV8fHNlbGYpLmhvdGtleXM9dCgpfSh0aGlzLGZ1bmN0aW9uKCl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIGYoZSl7cmV0dXJuKGY9ImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmInN5bWJvbCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/InN5bWJvbCI6dHlwZW9mIGV9KShlKX12YXIgZT0idW5kZWZpbmVkIiE9dHlwZW9mIG5hdmlnYXRvciYmMDxuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZigiZmlyZWZveCIpO2Z1bmN0aW9uIHAoZSx0LG4pe2UuYWRkRXZlbnRMaXN0ZW5lcj9lLmFkZEV2ZW50TGlzdGVuZXIodCxuLCExKTplLmF0dGFjaEV2ZW50JiZlLmF0dGFjaEV2ZW50KCJvbiIuY29uY2F0KHQpLGZ1bmN0aW9uKCl7bih3aW5kb3cuZXZlbnQpfSl9ZnVuY3Rpb24geShlLHQpe2Zvcih2YXIgbj10LnNsaWNlKDAsdC5sZW5ndGgtMSksbz0wO288bi5sZW5ndGg7bysrKW5bb109ZVtuW29dLnRvTG93ZXJDYXNlKCldO3JldHVybiBufWZ1bmN0aW9uIHUoZSl7InN0cmluZyIhPXR5cGVvZiBlJiYoZT0iIik7Zm9yKHZhciB0PShlPWUucmVwbGFjZSgvXHMvZywiIikpLnNwbGl0KCIsIiksbj10Lmxhc3RJbmRleE9mKCIiKTswPD1uOyl0W24tMV0rPSIsIix0LnNwbGljZShuLDEpLG49dC5sYXN0SW5kZXhPZigiIik7cmV0dXJuIHR9Zm9yKHZhciB0PXtiYWNrc3BhY2U6OCx0YWI6OSxjbGVhcjoxMixlbnRlcjoxMyxyZXR1cm46MTMsZXNjOjI3LGVzY2FwZToyNyxzcGFjZTozMixsZWZ0OjM3LHVwOjM4LHJpZ2h0OjM5LGRvd246NDAsZGVsOjQ2LGRlbGV0ZTo0NixpbnM6NDUsaW5zZXJ0OjQ1LGhvbWU6MzYsZW5kOjM1LHBhZ2V1cDozMyxwYWdlZG93bjozNCxjYXBzbG9jazoyMCwiXHUyMWVhIjoyMCwiLCI6MTg4LCIuIjoxOTAsIi8iOjE5MSwiYCI6MTkyLCItIjplPzE3MzoxODksIj0iOmU/NjE6MTg3LCI7IjplPzU5OjE4NiwiJyI6MjIyLCJbIjoyMTksIl0iOjIyMSwiXFwiOjIyMH0sZD17Ilx1MjFlNyI6MTYsc2hpZnQ6MTYsIlx1MjMyNSI6MTgsYWx0OjE4LG9wdGlvbjoxOCwiXHUyMzAzIjoxNyxjdHJsOjE3LGNvbnRyb2w6MTcsIlx1MjMxOCI6OTEsY21kOjkxLGNvbW1hbmQ6OTF9LGg9ezE2OiJzaGlmdEtleSIsMTg6ImFsdEtleSIsMTc6ImN0cmxLZXkiLDkxOiJtZXRhS2V5IixzaGlmdEtleToxNixjdHJsS2V5OjE3LGFsdEtleToxOCxtZXRhS2V5OjkxfSx2PXsxNjohMSwxODohMSwxNzohMSw5MTohMX0sZz17fSxuPTE7bjwyMDtuKyspdFsiZiIuY29uY2F0KG4pXT0xMTErbjt2YXIgdz1bXSxvPSJhbGwiLGs9W10sbT1mdW5jdGlvbihlKXtyZXR1cm4gdFtlLnRvTG93ZXJDYXNlKCldfHxkW2UudG9Mb3dlckNhc2UoKV18fGUudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApfTtmdW5jdGlvbiBpKGUpe289ZXx8ImFsbCJ9ZnVuY3Rpb24gYigpe3JldHVybiBvfHwiYWxsIn1mdW5jdGlvbiBjKGUpe3ZhciBmPWUuc2NvcGUsYz1lLm1ldGhvZCx0PWUuc3BsaXRLZXksYT12b2lkIDA9PT10PyIrIjp0O3UoZS5rZXkpLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zcGxpdChhKSxuPXQubGVuZ3RoLG89dFtuLTFdLHI9IioiPT09bz8iKiI6bShvKTtpZihnW3JdKXtmfHwoZj1iKCkpO3ZhciBpPTE8bj95KGQsdCk6W107Z1tyXT1nW3JdLm1hcChmdW5jdGlvbihlKXtyZXR1cm4oIWN8fGUubWV0aG9kPT09YykmJmUuc2NvcGU9PT1mJiZmdW5jdGlvbihlLHQpe2Zvcih2YXIgbj1lLmxlbmd0aDx0Lmxlbmd0aD90OmUsbz1lLmxlbmd0aDx0Lmxlbmd0aD9lOnQscj0hMCxpPTA7aTxuLmxlbmd0aDtpKyspfm8uaW5kZXhPZihuW2ldKXx8KHI9ITEpO3JldHVybiByfShlLm1vZHMsaSk/e306ZX0pfX0pfWZ1bmN0aW9uIE8oZSx0LG4pe3ZhciBvO2lmKHQuc2NvcGU9PT1ufHwiYWxsIj09PXQuc2NvcGUpe2Zvcih2YXIgciBpbiBvPTA8dC5tb2RzLmxlbmd0aCx2KU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh2LHIpJiYoIXZbcl0mJi0xPHQubW9kcy5pbmRleE9mKCtyKXx8dltyXSYmIX50Lm1vZHMuaW5kZXhPZigrcikpJiYobz0hMSk7KDAhPT10Lm1vZHMubGVuZ3RofHx2WzE2XXx8dlsxOF18fHZbMTddfHx2WzkxXSkmJiFvJiYiKiIhPT10LnNob3J0Y3V0fHwhMT09PXQubWV0aG9kKGUsdCkmJihlLnByZXZlbnREZWZhdWx0P2UucHJldmVudERlZmF1bHQoKTplLnJldHVyblZhbHVlPSExLGUuc3RvcFByb3BhZ2F0aW9uJiZlLnN0b3BQcm9wYWdhdGlvbigpLGUuY2FuY2VsQnViYmxlJiYoZS5jYW5jZWxCdWJibGU9ITApKX19ZnVuY3Rpb24gSyhuKXt2YXIgZT1nWyIqIl0sdD1uLmtleUNvZGV8fG4ud2hpY2h8fG4uY2hhckNvZGU7aWYoeC5maWx0ZXIuY2FsbCh0aGlzLG4pKXtpZig5MyE9PXQmJjIyNCE9PXR8fCh0PTkxKSx+dy5pbmRleE9mKHQpfHwyMjk9PT10fHx3LnB1c2godCksWyJjdHJsS2V5IiwiYWx0S2V5Iiwic2hpZnRLZXkiLCJtZXRhS2V5Il0uZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1oW2VdO25bZV0mJiF+dy5pbmRleE9mKHQpP3cucHVzaCh0KTohbltlXSYmLTE8dy5pbmRleE9mKHQpJiZ3LnNwbGljZSh3LmluZGV4T2YodCksMSl9KSx0IGluIHYpe2Zvcih2YXIgbyBpbiB2W3RdPSEwLGQpZFtvXT09PXQmJih4W29dPSEwKTtpZighZSlyZXR1cm59Zm9yKHZhciByIGluIHYpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHYscikmJih2W3JdPW5baFtyXV0pO3ZhciBpPWIoKTtpZihlKWZvcih2YXIgZj0wO2Y8ZS5sZW5ndGg7ZisrKWVbZl0uc2NvcGU9PT1pJiYoImtleWRvd24iPT09bi50eXBlJiZlW2ZdLmtleWRvd258fCJrZXl1cCI9PT1uLnR5cGUmJmVbZl0ua2V5dXApJiZPKG4sZVtmXSxpKTtpZih0IGluIGcpZm9yKHZhciBjPTA7YzxnW3RdLmxlbmd0aDtjKyspaWYoKCJrZXlkb3duIj09PW4udHlwZSYmZ1t0XVtjXS5rZXlkb3dufHwia2V5dXAiPT09bi50eXBlJiZnW3RdW2NdLmtleXVwKSYmZ1t0XVtjXS5rZXkpe2Zvcih2YXIgYT1nW3RdW2NdLGw9YS5rZXkuc3BsaXQoYS5zcGxpdEtleSkscz1bXSxwPTA7cDxsLmxlbmd0aDtwKyspcy5wdXNoKG0obFtwXSkpO3Muc29ydCgpLmpvaW4oIiIpPT09dy5zb3J0KCkuam9pbigiIikmJk8obixhLGkpfX19ZnVuY3Rpb24geChlLHQsbil7dz1bXTt2YXIgbz11KGUpLHI9W10saT0iYWxsIixmPWRvY3VtZW50LGM9MCxhPSExLGw9ITAscz0iKyI7Zm9yKHZvaWQgMD09PW4mJiJmdW5jdGlvbiI9PXR5cGVvZiB0JiYobj10KSwiW29iamVjdCBPYmplY3RdIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSYmKHQuc2NvcGUmJihpPXQuc2NvcGUpLHQuZWxlbWVudCYmKGY9dC5lbGVtZW50KSx0LmtleXVwJiYoYT10LmtleXVwKSx2b2lkIDAhPT10LmtleWRvd24mJihsPXQua2V5ZG93biksInN0cmluZyI9PXR5cGVvZiB0LnNwbGl0S2V5JiYocz10LnNwbGl0S2V5KSksInN0cmluZyI9PXR5cGVvZiB0JiYoaT10KTtjPG8ubGVuZ3RoO2MrKylyPVtdLDE8KGU9b1tjXS5zcGxpdChzKSkubGVuZ3RoJiYocj15KGQsZSkpLChlPSIqIj09PShlPWVbZS5sZW5ndGgtMV0pPyIqIjptKGUpKWluIGd8fChnW2VdPVtdKSxnW2VdLnB1c2goe2tleXVwOmEsa2V5ZG93bjpsLHNjb3BlOmksbW9kczpyLHNob3J0Y3V0Om9bY10sbWV0aG9kOm4sa2V5Om9bY10sc3BsaXRLZXk6c30pO3ZvaWQgMCE9PWYmJiFmdW5jdGlvbihlKXtyZXR1cm4tMTxrLmluZGV4T2YoZSl9KGYpJiZ3aW5kb3cmJihrLnB1c2goZikscChmLCJrZXlkb3duIixmdW5jdGlvbihlKXtLKGUpfSkscCh3aW5kb3csImZvY3VzIixmdW5jdGlvbigpe3c9W119KSxwKGYsImtleXVwIixmdW5jdGlvbihlKXtLKGUpLGZ1bmN0aW9uKGUpe3ZhciB0PWUua2V5Q29kZXx8ZS53aGljaHx8ZS5jaGFyQ29kZSxuPXcuaW5kZXhPZih0KTtpZihuPDB8fHcuc3BsaWNlKG4sMSksZS5rZXkmJiJtZXRhIj09ZS5rZXkudG9Mb3dlckNhc2UoKSYmdy5zcGxpY2UoMCx3Lmxlbmd0aCksOTMhPT10JiYyMjQhPT10fHwodD05MSksdCBpbiB2KWZvcih2YXIgbyBpbiB2W3RdPSExLGQpZFtvXT09PXQmJih4W29dPSExKX0oZSl9KSl9dmFyIHI9e3NldFNjb3BlOmksZ2V0U2NvcGU6YixkZWxldGVTY29wZTpmdW5jdGlvbihlLHQpe3ZhciBuLG87Zm9yKHZhciByIGluIGV8fChlPWIoKSksZylpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZyxyKSlmb3Iobj1nW3JdLG89MDtvPG4ubGVuZ3RoOyluW29dLnNjb3BlPT09ZT9uLnNwbGljZShvLDEpOm8rKztiKCk9PT1lJiZpKHR8fCJhbGwiKX0sZ2V0UHJlc3NlZEtleUNvZGVzOmZ1bmN0aW9uKCl7cmV0dXJuIHcuc2xpY2UoMCl9LGlzUHJlc3NlZDpmdW5jdGlvbihlKXtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIGUmJihlPW0oZSkpLCEhfncuaW5kZXhPZihlKX0sZmlsdGVyOmZ1bmN0aW9uKGUpe3ZhciB0PWUudGFyZ2V0fHxlLnNyY0VsZW1lbnQsbj10LnRhZ05hbWUsbz0hMDtyZXR1cm4hdC5pc0NvbnRlbnRFZGl0YWJsZSYmIlRFWFRBUkVBIiE9PW4mJigiSU5QVVQiIT09biYmIlRFWFRBUkVBIiE9PW58fHQucmVhZE9ubHkpfHwobz0hMSksb30sdW5iaW5kOmZ1bmN0aW9uKGUpe2lmKGUpe2lmKEFycmF5LmlzQXJyYXkoZSkpZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2Uua2V5JiZjKGUpfSk7ZWxzZSBpZigib2JqZWN0Ij09PWYoZSkpZS5rZXkmJmMoZSk7ZWxzZSBpZigic3RyaW5nIj09dHlwZW9mIGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49QXJyYXkoMTx0P3QtMTowKSxvPTE7bzx0O28rKyluW28tMV09YXJndW1lbnRzW29dO3ZhciByPW5bMF0saT1uWzFdOyJmdW5jdGlvbiI9PXR5cGVvZiByJiYoaT1yLHI9IiIpLGMoe2tleTplLHNjb3BlOnIsbWV0aG9kOmksc3BsaXRLZXk6IisifSl9fWVsc2UgT2JqZWN0LmtleXMoZykuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gZGVsZXRlIGdbZV19KX19O2Zvcih2YXIgYSBpbiByKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyLGEpJiYoeFthXT1yW2FdKTtpZigidW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdyl7dmFyIGw9d2luZG93LmhvdGtleXM7eC5ub0NvbmZsaWN0PWZ1bmN0aW9uKGUpe3JldHVybiBlJiZ3aW5kb3cuaG90a2V5cz09PXgmJih3aW5kb3cuaG90a2V5cz1sKSx4fSx3aW5kb3cuaG90a2V5cz14fXJldHVybiB4fSk7"},{"meta":{"name":"jszip.min.js","url":"https://cdn.bootcss.com/jszip/3.7.1/jszip.min.js","ts":1661936236433,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"FileSaver.min.js","url":"https://cdn.bootcss.com/FileSaver.js/1.3.8/FileSaver.min.js","ts":1661936236434,"mimetype":"text/javascript"},"source":"LyohIEBzb3VyY2UgaHR0cDovL3B1cmwuZWxpZ3JleS5jb20vZ2l0aHViL0ZpbGVTYXZlci5qcy9ibG9iL21hc3Rlci9GaWxlU2F2ZXIuanMgKi8KdmFyIHNhdmVBcz1zYXZlQXN8fGZ1bmN0aW9uKGUpeyJ1c2Ugc3RyaWN0IjtpZih0eXBlb2YgZT09PSJ1bmRlZmluZWQifHx0eXBlb2YgbmF2aWdhdG9yIT09InVuZGVmaW5lZCImJi9NU0lFIFsxLTldXC4vLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpe3JldHVybn12YXIgdD1lLmRvY3VtZW50LG49ZnVuY3Rpb24oKXtyZXR1cm4gZS5VUkx8fGUud2Via2l0VVJMfHxlfSxyPXQuY3JlYXRlRWxlbWVudE5TKCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIiwiYSIpLG89ImRvd25sb2FkImluIHIsYT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgTW91c2VFdmVudCgiY2xpY2siKTtlLmRpc3BhdGNoRXZlbnQodCl9LGk9L2NvbnN0cnVjdG9yL2kudGVzdChlLkhUTUxFbGVtZW50KXx8ZS5zYWZhcmksZj0vQ3JpT1NcL1tcZF0rLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLHU9ZnVuY3Rpb24odCl7KGUuc2V0SW1tZWRpYXRlfHxlLnNldFRpbWVvdXQpKGZ1bmN0aW9uKCl7dGhyb3cgdH0sMCl9LHM9ImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSIsZD0xZTMqNDAsYz1mdW5jdGlvbihlKXt2YXIgdD1mdW5jdGlvbigpe2lmKHR5cGVvZiBlPT09InN0cmluZyIpe24oKS5yZXZva2VPYmplY3RVUkwoZSl9ZWxzZXtlLnJlbW92ZSgpfX07c2V0VGltZW91dCh0LGQpfSxsPWZ1bmN0aW9uKGUsdCxuKXt0PVtdLmNvbmNhdCh0KTt2YXIgcj10Lmxlbmd0aDt3aGlsZShyLS0pe3ZhciBvPWVbIm9uIit0W3JdXTtpZih0eXBlb2Ygbz09PSJmdW5jdGlvbiIpe3RyeXtvLmNhbGwoZSxufHxlKX1jYXRjaChhKXt1KGEpfX19fSxwPWZ1bmN0aW9uKGUpe2lmKC9eXHMqKD86dGV4dFwvXFMqfGFwcGxpY2F0aW9uXC94bWx8XFMqXC9cUypcK3htbClccyo7LipjaGFyc2V0XHMqPVxzKnV0Zi04L2kudGVzdChlLnR5cGUpKXtyZXR1cm4gbmV3IEJsb2IoW1N0cmluZy5mcm9tQ2hhckNvZGUoNjUyNzkpLGVdLHt0eXBlOmUudHlwZX0pfXJldHVybiBlfSx2PWZ1bmN0aW9uKHQsdSxkKXtpZighZCl7dD1wKHQpfXZhciB2PXRoaXMsdz10LnR5cGUsbT13PT09cyx5LGg9ZnVuY3Rpb24oKXtsKHYsIndyaXRlc3RhcnQgcHJvZ3Jlc3Mgd3JpdGUgd3JpdGVlbmQiLnNwbGl0KCIgIikpfSxTPWZ1bmN0aW9uKCl7aWYoKGZ8fG0mJmkpJiZlLkZpbGVSZWFkZXIpe3ZhciByPW5ldyBGaWxlUmVhZGVyO3Iub25sb2FkZW5kPWZ1bmN0aW9uKCl7dmFyIHQ9Zj9yLnJlc3VsdDpyLnJlc3VsdC5yZXBsYWNlKC9eZGF0YTpbXjtdKjsvLCJkYXRhOmF0dGFjaG1lbnQvZmlsZTsiKTt2YXIgbj1lLm9wZW4odCwiX2JsYW5rIik7aWYoIW4pZS5sb2NhdGlvbi5ocmVmPXQ7dD11bmRlZmluZWQ7di5yZWFkeVN0YXRlPXYuRE9ORTtoKCl9O3IucmVhZEFzRGF0YVVSTCh0KTt2LnJlYWR5U3RhdGU9di5JTklUO3JldHVybn1pZigheSl7eT1uKCkuY3JlYXRlT2JqZWN0VVJMKHQpfWlmKG0pe2UubG9jYXRpb24uaHJlZj15fWVsc2V7dmFyIG89ZS5vcGVuKHksIl9ibGFuayIpO2lmKCFvKXtlLmxvY2F0aW9uLmhyZWY9eX19di5yZWFkeVN0YXRlPXYuRE9ORTtoKCk7Yyh5KX07di5yZWFkeVN0YXRlPXYuSU5JVDtpZihvKXt5PW4oKS5jcmVhdGVPYmplY3RVUkwodCk7c2V0VGltZW91dChmdW5jdGlvbigpe3IuaHJlZj15O3IuZG93bmxvYWQ9dTthKHIpO2goKTtjKHkpO3YucmVhZHlTdGF0ZT12LkRPTkV9KTtyZXR1cm59UygpfSx3PXYucHJvdG90eXBlLG09ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBuZXcgdihlLHR8fGUubmFtZXx8ImRvd25sb2FkIixuKX07aWYodHlwZW9mIG5hdmlnYXRvciE9PSJ1bmRlZmluZWQiJiZuYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYil7cmV0dXJuIGZ1bmN0aW9uKGUsdCxuKXt0PXR8fGUubmFtZXx8ImRvd25sb2FkIjtpZighbil7ZT1wKGUpfXJldHVybiBuYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYihlLHQpfX13LmFib3J0PWZ1bmN0aW9uKCl7fTt3LnJlYWR5U3RhdGU9dy5JTklUPTA7dy5XUklUSU5HPTE7dy5ET05FPTI7dy5lcnJvcj13Lm9ud3JpdGVzdGFydD13Lm9ucHJvZ3Jlc3M9dy5vbndyaXRlPXcub25hYm9ydD13Lm9uZXJyb3I9dy5vbndyaXRlZW5kPW51bGw7cmV0dXJuIG19KHR5cGVvZiBzZWxmIT09InVuZGVmaW5lZCImJnNlbGZ8fHR5cGVvZiB3aW5kb3chPT0idW5kZWZpbmVkIiYmd2luZG93fHx0aGlzLmNvbnRlbnQpO2lmKHR5cGVvZiBtb2R1bGUhPT0idW5kZWZpbmVkIiYmbW9kdWxlLmV4cG9ydHMpe21vZHVsZS5leHBvcnRzLnNhdmVBcz1zYXZlQXN9ZWxzZSBpZih0eXBlb2YgZGVmaW5lIT09InVuZGVmaW5lZCImJmRlZmluZSE9PW51bGwmJmRlZmluZS5hbWQhPT1udWxsKXtkZWZpbmUoIkZpbGVTYXZlci5qcyIsZnVuY3Rpb24oKXtyZXR1cm4gc2F2ZUFzfSl9Cg=="}]},{"name":"搞定设计 || 创客贴 (屏蔽水印和会员小提示，下载PDF格式！！）","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"compat_powerful_this":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://*.gaoding.com/design?id=*","*://*.gaoding.com/odyssey/design?*","*://*.chuangkit.com/design*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1661936236488,"data":{}},"enabled":false,"position":3,"file_url":"https://greasyfork.org/scripts/401870-%E6%90%9E%E5%AE%9A%E8%AE%BE%E8%AE%A1-%E5%88%9B%E5%AE%A2%E8%B4%B4-%E5%B1%8F%E8%94%BD%E6%B0%B4%E5%8D%B0%E5%92%8C%E4%BC%9A%E5%91%98%E5%B0%8F%E6%8F%90%E7%A4%BA-%E4%B8%8B%E8%BD%BDpdf%E6%A0%BC%E5%BC%8F/code/%E6%90%9E%E5%AE%9A%E8%AE%BE%E8%AE%A1%20%7C%7C%20%E5%88%9B%E5%AE%A2%E8%B4%B4%20(%E5%B1%8F%E8%94%BD%E6%B0%B4%E5%8D%B0%E5%92%8C%E4%BC%9A%E5%91%98%E5%B0%8F%E6%8F%90%E7%A4%BA%EF%BC%8C%E4%B8%8B%E8%BD%BDPDF%E6%A0%BC%E5%BC%8F%EF%BC%81%EF%BC%81%EF%BC%89.user.js","uuid":"7ba1b4a4-0793-4802-a929-8c288030ab3c","source":"","requires":[{"meta":{"name":"jquery.min.js","url":"http://cdn.staticfile.org/jquery/1.8.3/jquery.min.js","ts":1661936236484,"mimetype":"text/javascript"},"source":""}]},{"name":"知乎增强","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"compat_powerful_this":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://www.zhihu.com/*","*://zhuanlan.zhihu.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-end","orig_noframes":null}},"storage":{"ts":1661936236491,"data":{"menu_allTime":"btrue","menu_backToTop":"btrue","menu_blockKeywords":"bfalse","menu_blockType":"s","menu_blockTypeArticle":"bfalse","menu_blockTypeSearch":"bfalse","menu_blockTypeTopic":"bfalse","menu_blockTypeVideo":"bfalse","menu_blockUsers":"bfalse","menu_blockYanXuan":"bfalse","menu_cleanSearch":"bfalse","menu_cleanTitles":"bfalse","menu_collapsedAnswer":"btrue","menu_collapsedNowAnswer":"btrue","menu_customBlockKeywords":"o[]","menu_customBlockUsers":"o[\"故事档案局\",\"盐选推荐\",\"盐选科普\",\"盐选成长计划\",\"知乎盐选会员\",\"知乎盐选创作者\",\"盐选心理\",\"盐选健康必修课\",\"盐选奇妙物语\",\"盐选生活馆\",\"盐选职场\",\"盐选文学甄选\",\"盐选作者小管家\",\"盐选博物馆\",\"盐选点金\",\"盐选测评室\",\"盐选科技前沿\",\"盐选会员精品\"]","menu_defaultCollapsedAnswer":"btrue","menu_directLink":"btrue","menu_publishTop":"btrue","menu_questionRichTextMore":"bfalse","menu_removeHighlightLink":"btrue","menu_toQuestion":"btrue","menu_typeTips":"btrue"}},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/419081-%E7%9F%A5%E4%B9%8E%E5%A2%9E%E5%BC%BA/code/%E7%9F%A5%E4%B9%8E%E5%A2%9E%E5%BC%BA.user.js","uuid":"921492cf-161e-4ef1-a7cc-ae685c048561","source":""},{"name":"自由编辑","options":{"check_for_updates":false,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"compat_powerful_this":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*www.ruiwen.com/*","*www.xuexila.com/*","*www.unjs.com/*","*m.ruiwen.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1661936236467,"data":{}},"enabled":true,"position":5,"uuid":"971206e1-65d5-4cfb-add1-cb0f913c8311","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDoh6rnlLHnvJbovpEKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vdGFtcGVybW9ua2V5Lm5ldC8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICB0cnkgdG8gdGFrZSBvdmVyIHRoZSB3b3JsZCEKLy8gQGF1dGhvciAgICAgICBZb3UKLy8gQG1hdGNoICAgICAgICp3d3cucnVpd2VuLmNvbS8qCi8vIEBtYXRjaCAgICAgICAqd3d3Lnh1ZXhpbGEuY29tLyoKLy8gQG1hdGNoICAgICAgICp3d3cudW5qcy5jb20vKgovLyBAbWF0Y2ggICAgICAgKm0ucnVpd2VuLmNvbS8qCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCmphdmFzY3JpcHQ6ZG9jdW1lbnQuYm9keS5jb250ZW50RWRpdGFibGU9J3RydWUnO2RvY3VtZW50LmRlc2lnbk1vZGU9J29uJzt2b2lkIDA="},{"name":"自动点击去广告","options":{"check_for_updates":false,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"compat_powerful_this":null,"noframes":null,"unwrap":null,"run_at":"document-end","tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*huaban.com/*","*www.gaoding.com/template/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1661936236466,"data":{}},"enabled":true,"position":6,"uuid":"10858df9-236c-4915-9d78-d3e56474cf7e","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDoh6rliqjngrnlh7vljrvlub/lkYoKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vdGFtcGVybW9ua2V5Lm5ldC8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICB0cnkgdG8gdGFrZSBvdmVyIHRoZSB3b3JsZCEKLy8gQGF1dGhvciAgICAgICBZb3UKLy8gQG1hdGNoICAgICAgICpodWFiYW4uY29tLyoKLy8gQG1hdGNoICAgICAgICp3d3cuZ2FvZGluZy5jb20vdGVtcGxhdGUvKgovLyBAaWNvbiAgICAgICAgIGRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBQUFBQUNINUJBRUtBQUVBTEFBQUFBQUJBQUVBQUFJQ1RBRUFPdz09Ci8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCgooZnVuY3Rpb24oKSB7Cgogc2V0VGltZW91dChmdW5jdGlvbigpewogICAgdmFyIEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoInA3emxxcGJvIilbMF07CiAgICAgICAgaWYgKEJ0bi5jbGFzc05hbWUgPT0gInA3emxxcGJvIikgewogICAgICAgICAgICBCdG4uY2xpY2soKTt9fSwxMDAwKQoKIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgIHZhciBCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJnZGEtYnRuIGdkYS1idG4tcHJpbWFyeSBnZGQtbWF0ZXJpYWwtZGV0YWlsLWluZm9fX2J1dHRvbi1lZGl0IilbMF07CiAgICAgICAgaWYgKEJ0bi5jbGFzc05hbWUgPT0gImdkYS1idG4gZ2RhLWJ0bi1wcmltYXJ5IGdkZC1tYXRlcmlhbC1kZXRhaWwtaW5mb19fYnV0dG9uLWVkaXQiKSB7CiAgICAgICAgICAgIEJ0bi5jbGljaygpO319LDI1MDApCgoKCi8qKgphZGRFdmVudExpc3RlbmVyKCdjbGljaycsICh7dGFyZ2V0fSkgPT4gewogICAgdmFyIGpzX2NvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJqc19jb250ZW50IilbMF07CiAgICBpZih0YXJnZXQgPT09IGpzX2NvbnRlbnQpIHsKICAgIGpzX2NvbnRlbnQuc2VsZWN0KCk7CiAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnY29weScpOwogIH0KfSkKYWxlcnQoImhhaCIpCioqLwp9KSgpOwo="},{"name":"自动无缝翻页","options":{"check_for_updates":false,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"compat_powerful_this":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://*/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-end","orig_noframes":null}},"storage":{"ts":1661936236493,"data":{"menu_disable":"o[\"greasyfork.org\"]","menu_discuz_thread_page":"btrue","menu_page_number":"btrue","menu_pause_page":"bfalse"}},"enabled":false,"position":7,"file_url":"https://greasyfork.org/scripts/419215-%E8%87%AA%E5%8A%A8%E6%97%A0%E7%BC%9D%E7%BF%BB%E9%A1%B5/code/%E8%87%AA%E5%8A%A8%E6%97%A0%E7%BC%9D%E7%BF%BB%E9%A1%B5.user.js","uuid":"74817b73-3d0c-467a-a273-193a6b21d60a","source":""},{"name":"让我直接跳转好吗","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"compat_powerful_this":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://*.zhihu.com/*","*://c.pc.qq.com/*","*://*.jianshu.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1661936236495,"data":{}},"enabled":true,"position":8,"file_url":"https://greasyfork.org/scripts/431920-%E8%AE%A9%E6%88%91%E7%9B%B4%E6%8E%A5%E8%B7%B3%E8%BD%AC%E5%A5%BD%E5%90%97/code/%E8%AE%A9%E6%88%91%E7%9B%B4%E6%8E%A5%E8%B7%B3%E8%BD%AC%E5%A5%BD%E5%90%97.user.js","uuid":"f5f18e1e-97da-436d-a580-5e6852b80c6b","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDorqnmiJHnm7TmjqXot7Povazlpb3lkJcKLy8gQG5hbWVzcGFjZSAgICBodHRwczovL2dyZWFzeWZvcmsub3JnL3poLUNOL3VzZXJzLzE3NzQ1OC1iZDc3NwovLyBAdmVyc2lvbiAgICAgIDAuNAovLyBAZGVzY3JpcHRpb24gIOe9kemhteS4reeahOWklumTvuebtOaOpei3s+WHuuWOu+iAjOS4jeWGjeiiq+aLpuS4gOmBkwovLyBAYXV0aG9yICAgICAgIHdpbmRlbmcKLy8gQG1hdGNoICAgICAgICAqOi8vKi56aGlodS5jb20vKgovLyBAbWF0Y2ggICAgICAgICo6Ly9jLnBjLnFxLmNvbS8qCi8vIEBtYXRjaCAgICAgICAgKjovLyouamlhbnNodS5jb20vKgovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgpmdW5jdGlvbiBnYW9aaGlodSgpIHsKICBpZiAoIXdpbmRvdy5sb2NhdGlvbi5ocmVmLm1hdGNoKCd6aGlodS5jb20nKSkgcmV0dXJuCgogIGxldCBydW4gPSAoKSA9PiB7CiAgICBsZXQgY250ID0gMAogICAgbGV0IGFMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYScpCiAgICBmb3IgKGxldCBhIG9mIGFMaXN0KSB7CiAgICAgIGNvbnN0IGhyZWYgPSBhLmdldEF0dHJpYnV0ZSgnaHJlZicpCiAgICAgIGNvbnN0IG1hdGNoZXMgPSBocmVmLm1hdGNoKC9saW5rXC56aGlodVwuY29tXC8/XD90YXJnZXQ9KC4qKS8pCiAgICAgIC8vIGNvbnNvbGUubG9nKCc/JywgaHJlZiwgbWF0Y2hlcykKICAgICAgaWYgKG1hdGNoZXMpIHsKICAgICAgICBjb25zdCB1cmwgPSBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hlc1sxXSkKICAgICAgICBhLnNldEF0dHJpYnV0ZSgnaHJlZicsIHVybCkKICAgICAgICAvLyBjb25zb2xlLmxvZyhgJHtocmVmfSA9PiAke3VybH1gKQogICAgICAgICsrY250CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBjbnQgPiAwCiAgfQoKICBydW4oKQoKICBsZXQgTXV0YXRpb25PYnNlcnZlciA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5Nb3pNdXRhdGlvbk9ic2VydmVyCgogIGxldCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uIChtdXRhdGlvbnMpIHsKICAgIHJ1bigpCiAgfSkKCiAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCB7CiAgICBjaGlsZExpc3Q6IHRydWUsCiAgICBzdWJ0cmVlOiB0cnVlCiAgfSkKfQoKZnVuY3Rpb24gZ2FvUVEoKSB7CiAgaWYgKCF3aW5kb3cubG9jYXRpb24uaHJlZi5tYXRjaCgnYy5wYy5xcS5jb20nKSkgcmV0dXJuCgogIGNvbnN0IG1hdGNoZXMgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLm1hdGNoKC9wZnVybD0oW14mJF0qKS8pCiAgaWYgKG1hdGNoZXMpIHsKICAgIGxldCB1cmwgPSBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hlc1sxXSkKICAgIGNvbnNvbGUubG9nKCdRUSB1cmwnLCB1cmwpCiAgICBpZiAoIXVybC5zdGFydHNXaXRoKCdodHRwJykgJiYgIXVybC5zdGFydHNXaXRoKCcvLycpKSB1cmwgPSAnLy8nICsgdXJsCiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybAogIH0KfQoKZnVuY3Rpb24gZ2FvSmlhbnNodSgpIHsKICBpZiAoIXdpbmRvdy5sb2NhdGlvbi5ocmVmLm1hdGNoKCdqaWFuc2h1LmNvbScpKSByZXR1cm4KCiAgbGV0IHJ1biA9ICgpID0+IHsKICAgIGxldCBjbnQgPSAwCiAgICBsZXQgYUxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhJykKICAgIGZvciAobGV0IGEgb2YgYUxpc3QpIHsKICAgICAgY29uc3QgaHJlZiA9IGEuZ2V0QXR0cmlidXRlKCdocmVmJykKICAgICAgY29uc3QgbWF0Y2hlcyA9IGhyZWYubWF0Y2goL2xpbmtzLmppYW5zaHUuY29tXC9nb1w/dG89KFteJiRdKikvKQogICAgICAvLyBjb25zb2xlLmxvZygnPycsIGhyZWYsIG1hdGNoZXMpCiAgICAgIGlmIChtYXRjaGVzKSB7CiAgICAgICAgY29uc3QgdXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoZXNbMV0pCiAgICAgICAgYS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCB1cmwpCiAgICAgICAgLy8gY29uc29sZS5sb2coYCR7aHJlZn0gPT4gJHt1cmx9YCkKICAgICAgICArK2NudAogICAgICB9CiAgICB9CiAgICByZXR1cm4gY250ID4gMAogIH0KCiAgcnVuKCkKCiAgbGV0IE11dGF0aW9uT2JzZXJ2ZXIgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuV2ViS2l0TXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuTW96TXV0YXRpb25PYnNlcnZlcgoKICBsZXQgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAobXV0YXRpb25zKSB7CiAgICBydW4oKQogIH0pCgogIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuYm9keSwgewogICAgY2hpbGRMaXN0OiB0cnVlLAogICAgc3VidHJlZTogdHJ1ZQogIH0pCn0KCihmdW5jdGlvbiAoKSB7CiAgJ3VzZSBzdHJpY3QnOwoKICAvLyBZb3VyIGNvZGUgaGVyZS4uLgogIGdhb1poaWh1KCkKICBnYW9RUSgpCiAgZ2FvSmlhbnNodSgpCn0pKCk7"},{"name":"复制秀米页面","options":{"check_for_updates":false,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"compat_powerful_this":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://xiumi.us/studio/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1661936236463,"data":{}},"enabled":true,"position":9,"uuid":"271c84f8-244e-47e9-99bd-8d39e7d4d9ad","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDlpI3liLbnp4DnsbPpobXpnaIKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vdGFtcGVybW9ua2V5Lm5ldC8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICB0cnkgdG8gdGFrZSBvdmVyIHRoZSB3b3JsZCEKLy8gQGF1dGhvciAgICAgICBZb3UKLy8gQG1hdGNoICAgICAgICBodHRwczovL3hpdW1pLnVzL3N0dWRpby8qCi8vIEBpY29uICAgICAgICAgaHR0cHM6Ly9zdGMueGl1bWkudXMvaW1hZ2VzL2I4MGNkOC54aXVtaV9sb2dvXzQwLnBuZwovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oICQgKSB7CiAgICB2YXIgZGl2PSI8ZGl2IHN0eWxlPSd3aWR0aDogNTBweDsgaGVpZ2h0OiA1MHB4OyBwb3NpdGlvbjogZml4ZWQ7IHRvcDogMDsgbGVmdDogMDsgei1pbmRleDogOTk5OTk7b3ZlcmZsb3c6IHZpc2libGU7Jz48YnV0dG9uIGlkPSdxY3N5JyBzdHlsZT0nYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1NSAyNTUgMjU1IC8gMCUpOyB3aWR0aDogNTBweDtoZWlnaHQ6IDUwcHg7Y29sb3I6IzAwODlmZjAwO21hcmdpbi1sZWZ0OiAxMHB4O2JvcmRlci1yYWRpdXM6IDI1cHg7Ym9yZGVyOiAxcHggc29saWQgI2ZmZmZmZjtiYWNrZ3JvdW5kLWltYWdlOiB1cmwoaHR0cHM6Ly9naW1nMi5iYWlkdS5jb20vaW1hZ2Vfc2VhcmNoL3NyYz1odHRwJTNBJTJGJTJGYy1zc2wuZHVpdGFuZy5jb20lMkZ1cGxvYWRzJTJGaXRlbSUyRjIwMjAwNCUyRjMwJTJGMjAyMDA0MzAwMDU0MjJfY2pua3kudGh1bWIuNDAwXzAuZ2lmJnJlZmVyPWh0dHAlM0ElMkYlMkZjLXNzbC5kdWl0YW5nLmNvbSZhcHA9MjAwMiZzaXplPWY5OTk5LDEwMDAwJnE9YTgwJm49MCZnPTBuJmZtdD1qcGVnP3NlYz0xNjQ4NDc5MzA2JnQ9YmQ4OGJhMjgxMzMxYjhmM2UxMjNiZDlhMmZmNjcxMzIpOyBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OyBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgY2VudGVyOyc+5aSN5Yi25Luj56CBPC9idXR0b24+PC9kaXY+IjsKICAgICQoImJvZHkiKS5wcmVwZW5kKGRpdik7CiAgICB2YXIgYnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInFjc3kiKTsKYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY29weUNvbnRlbnQpOwoKZnVuY3Rpb24gY29weUNvbnRlbnQgKCkgewogICAgIGZ1bmN0aW9uIG1wb3J0ICgpIHsKICAgICB2YXIgQnRuX3NhdmUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJidG4taW1nIG9wLWJ0biBkb25lIGRyb3Bkb3duLXRvZ2dsZSIpWzBdOwogICAgICBpZiAoQnRuX3NhdmUuY2xhc3NOYW1lID09ICJidG4taW1nIG9wLWJ0biBkb25lIGRyb3Bkb3duLXRvZ2dsZSIpIHsKICAgICAgICAgICAgQnRuX3NhdmUuY2xpY2soKTt9CiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICAgICAgdmFyIEJ0bjIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJnbHlwaGljb24gZ2x5cGhpY29uLW5ldy13aW5kb3ciKVswXTsKICAgICAgICAgICAgaWYgKEJ0bjIuY2xhc3NOYW1lID09ICJnbHlwaGljb24gZ2x5cGhpY29uLW5ldy13aW5kb3ciKSB7CiAgICAgICAgICAgIEJ0bjIuY2xpY2soKTt9fSwzMDApOwogICAgICB9OwoKICAgIGZ1bmN0aW9uIFRvYXN0KG1zZyxkdXJhdGlvbil7CiAgICBkdXJhdGlvbj1pc05hTihkdXJhdGlvbik/MzAwMDpkdXJhdGlvbjsKICAgIHZhciBtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICBtLmlubmVySFRNTCA9IG1zZzsKICAgIG0uc3R5bGUuY3NzVGV4dD0iZm9udC1zaXplOiAxOHB4O2NvbG9yOiByZ2IoMjU1LCAyNTUsIDI1NSk7YmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjYpO3BhZGRpbmc6IDIwcHggMjVweDttYXJnaW46IDAgMCAwIC02MHB4O2JvcmRlci1yYWRpdXM6IDRweDtwb3NpdGlvbjogZml4ZWQ7ICAgIHRvcDogNTAlO2xlZnQ6IDUwJTt3aWR0aDogMjYwcHg7dGV4dC1hbGlnbjogY2VudGVyOyI7CiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG0pOwogICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICB2YXIgZCA9IDAuNTsKICAgICAgICBtLnN0eWxlLm9wYWNpdHkgPSAnMCc7CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChtKSB9LCBkICogMTAwMCk7CiAgICB9LCBkdXJhdGlvbik7Cn0KCiAgZnVuY3Rpb24gc3BsaXQgKCkgewogICAgdmFyIGh0bWwgPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5pbm5lckhUTUw7CiAgICB2YXIgczE9InVuc2FmZVwiPiZuYnNwOyI7CiAgICB2YXIgczI9ICImbmJzcDs8L2RpdiI7CiAgICB2YXIgaHRtbDIgPSBodG1sLnNwbGl0KHMxKVsxXTsKICAgIHZhciBzZWN0aW9uID0gaHRtbDIuc3BsaXQoczIpWzBdOwogICAgcmV0dXJuIHNlY3Rpb247CiAgIH07CiAgdHJ5IHsKICAgIHVuZGVmaW5lZAogICAgLy/lj6/og73kvJrlr7zoh7TplJnor6/nmoTku6PnoIEKICAgIHNwbGl0KCk7CiAgICB9CiAgY2F0Y2ggKGVycm9yKQogICAgewogICAgICB1bmRlZmluZWQKICAgICAgLy9hbGVydCgi6K+35YWI5Zu65a6a57yW6L6R5Yy677yBIikKICAgICAgbXBvcnQgKCk7CiAgICAgIH0KICB2YXIgc2VjdGlvbiA9IHNwbGl0KCk7CiAgbGV0IHZhbCA9IHNlY3Rpb247CiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY29weScsIHNhdmUpOyAvLyDnm5HlkKzmtY/op4jlmahjb3B55LqL5Lu2CiAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKTsgLy8g5omn6KGMY29weeS6i+S7tu+8jOi/meaXtuebkeWQrOWHveaVsOS8muaJp+ihjHNhdmXlh73mlbDjgIIKICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb3B5Jywgc2F2ZSk7IC8vIOenu+mZpGNvcHnkuovku7YKICAvLyDkv53lrZjmlrnms5UKICBmdW5jdGlvbiBzYXZlKGUpIHsKICAgIGUuY2xpcGJvYXJkRGF0YS5zZXREYXRhKCd0ZXh0L3BsYWluJywgdmFsKTsgLy8g5Ymq6LS05p2/5YaF5a656K6+572uCiAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgfQogICAgVG9hc3QoJ+aPkOekuu+8muS7o+eggeWkjeWItuaIkOWKn++8ge+8gScsMTAwMCk7Cn0KfSkoIGpRdWVyeSApOwoKCg=="},{"name":"微信编辑器增强🧬","options":{"check_for_updates":false,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"compat_powerful_this":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://www.135editor.com/*","*://bj.96weixin.com/*","*://www.365editor.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1661936236482,"data":{}},"enabled":true,"position":10,"file_url":"https://greasyfork.org/scripts/441958-%E5%BE%AE%E4%BF%A1%E7%BC%96%E8%BE%91%E5%99%A8%E5%A2%9E%E5%BC%BA/code/%E5%BE%AE%E4%BF%A1%E7%BC%96%E8%BE%91%E5%99%A8%E5%A2%9E%E5%BC%BA%F0%9F%A7%AC.user.js","uuid":"0e25c785-f841-44d6-ad70-30feefeb088c","source":""},{"name":"转换图片到兼容格式","options":{"check_for_updates":false,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"compat_powerful_this":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://mp.weixin.qq.com/*","*://huaban.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1661936236496,"data":{}},"enabled":false,"position":11,"file_url":"https://greasyfork.org/scripts/390883-%E8%BD%AC%E6%8D%A2%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%9B%BE%E7%89%87%E5%88%B0%E5%85%BC%E5%AE%B9%E6%A0%BC%E5%BC%8F/code/%E8%BD%AC%E6%8D%A2%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%9B%BE%E7%89%87%E5%88%B0%E5%85%BC%E5%AE%B9%E6%A0%BC%E5%BC%8F.user.js","uuid":"92c68116-30d0-4bc0-a5c9-27ba257a759d","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDovazmjaLlm77niYfliLDlhbzlrrnmoLzlvI8KLy8gQGRlc2NyaXB0aW9uICDlsIZXRUJQ5qC85byP5Zu+54mH6L2s5o2i5YiwSlBFR+OAgVBOR+etieWFvOWuueaAp+i+g+WlveeahOagvOW8jwovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvdXNlcnMvMTk3NTI5Ci8vIEB2ZXJzaW9uICAgICAgMC42LjQKLy8gQGF1dGhvciAgICAgICBra29jZGtvCi8vIEBsaWNlbnNlICAgICAgVW5saWNlbnNlCi8vIEBtYXRjaCAgICAgICAgKjovL21wLndlaXhpbi5xcS5jb20vKgovLyBAbWF0Y2ggICAgICAgICo6Ly9odWFiYW4uY29tLyoKCgoKLy8gPT0vVXNlclNjcmlwdD09CiJ1c2Ugc3RyaWN0IjsKCmNvbnN0IHsgYWRkRmxvYXRCdXR0b24gfSA9IHsKICBhZGRGbG9hdEJ1dHRvbih0ZXh0LCBvbmNsaWNrKSAvKiAyMDIyMDMyNC0wOTUwICovIHsKICAgIGlmICghZG9jdW1lbnQuYWRkRmxvYXRCdXR0b24pIHsKICAgICAgY29uc3QgaG9zdCA9IGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IikpOwogICAgICBjb25zdCByb290ID0gaG9zdC5hdHRhY2hTaGFkb3coeyBtb2RlOiAib3BlbiIgfSk7CiAgICAgIHJvb3QuaW5uZXJIVE1MID0gYDxzdHlsZT46aG9zdHtwb3NpdGlvbjpmaXhlZDt0b3A6NHB4O2xlZnQ6NHB4O3otaW5kZXg6MjE0NzQ4MzY0NztoZWlnaHQ6MH0jaXtkaXNwbGF5Om5vbmV9KntmbG9hdDpsZWZ0O3BhZGRpbmc6MWVtO21hcmdpbjo0cHg7bGluZS1oZWlnaHQ6MDtjb2xvcjojZmZmO3VzZXItc2VsZWN0Om5vbmU7YmFja2dyb3VuZDojMjhlO2JvcmRlcjoxcHggc29saWQgI2ZmZmE7Ym9yZGVyLXJhZGl1czo4cHg7dHJhbnNpdGlvbjouM3N9W2Zvcl1+OmFjdGl2ZXtiYWNrZ3JvdW5kOiM0YWY7dHJhbnNpdGlvbjowc306Y2hlY2tlZH4qe29wYWNpdHk6LjM7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTNlbSl9OmNoZWNrZWQrKnt0cmFuc2Zvcm06dHJhbnNsYXRlWSgzZW0pfTwvc3R5bGU+PGlucHV0IGlkPWkgdHlwZT1jaGVja2JveD48bGFiZWwgZm9yPWk+YDsKICAgICAgZG9jdW1lbnQuYWRkRmxvYXRCdXR0b24gPSAodGV4dCwgb25jbGljaykgPT4gewogICAgICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGFiZWwiKTsKICAgICAgICBlbC50ZXh0Q29udGVudCA9IHRleHQ7CiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCBvbmNsaWNrKTsKICAgICAgICByZXR1cm4gcm9vdC5hcHBlbmRDaGlsZChlbCk7CiAgICAgIH07CiAgICB9CiAgICByZXR1cm4gZG9jdW1lbnQuYWRkRmxvYXRCdXR0b24odGV4dCwgb25jbGljayk7CiAgfSwKfTsKCmFkZEZsb2F0QnV0dG9uKCLovazmjaLlhajpg6jlm77niYfliLDlhbzlrrnmoLzlvI8iLCBmdW5jdGlvbiAoKSB7CiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiaW1nIikuZm9yRWFjaCgoZWwpID0+IHsKICAgIGNvbnN0IGltZ1VybFN0ciA9IGVsLmRhdGFzZXQuc3JjIHx8IGVsLnNyYzsKICAgIGlmICghaW1nVXJsU3RyKSByZXR1cm47CiAgICBjb25zdCBpbWdVcmwgPSBuZXcgVVJMKGltZ1VybFN0cik7CiAgICBpbWdVcmwuc2VhcmNoUGFyYW1zLnNldCgidHAiLCAicG5nIik7CiAgICBjb25zdCBuZXdJbWcgPSBlbC5jbG9uZU5vZGUoKTsKICAgIG5ld0ltZy5zcmMgPSBpbWdVcmwuaHJlZjsKICAgIGVsLnJlcGxhY2VXaXRoKG5ld0ltZyk7CiAgfSk7CiAgdGhpcy5zdHlsZS5iYWNrZ3JvdW5kID0gIiM0Y2FmNTAiOwogIHRoaXMudGV4dENvbnRlbnQgPSAi5YWo6YOo5Zu+54mH6YO95bey6L2s5o2i5a6M5oiQ77yBIjsKfSk7Cg=="},{"name":"🔥🔥🔥文本选中复制🔥🔥🔥","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"compat_powerful_this":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://wenku.baidu.com/view/*","*://wenku.baidu.com/share/*","*://wenku.baidu.com/link*","*://wenku.baidu.com/ndPureView/*","*://www.51test.net/show/*","*://www.xuexi.la/*","*://www.xuexila.com/*","*://www.cspengbo.com/*","*://*.doc88.com/*","*://segmentfault.com/*","*://wk.baidu.com/view/*","*://leetcode-cn.com/problems/*","*://www.zhihu.com/*","*://z.30edu.com.cn/*","*://docs.qq.com/doc/*","*://boke112.com/post/*","*://www.yuque.com/*","*://www.commandlinux.com/*","*://*.diyifanwen.com/*","*://*.mbalib.com/*","*://*.cnitpm.com/*","*://bbs.mihoyo.com/ys/obc/*","*://*.ruiwen.com/*","*://www.uemeds.cn/*","*://www.oh100.com/*","*://www.aiyuke.com/news/*","*://www.fwsir.com/*","*://www.wenxm.cn/*","*://www.unjs.com/*","*://www.ahsrst.cn/*","*://*.yjbys.com/*","*://*.qidian.com/*","*://*.zongheng.com/*","*://*.17k.com/*","*://*.ciweimao.com/*","*://book.qq.com/*","*://*.360doc.com/content/*","*://*.850500.com/news/*","*://utaten.com/lyric/*","*://*.jianbiaoku.com/*","*://*.kt250.com/*","*://www.kejudati.com/*","*://*.xiaohongshu.com/discovery/*","*://*.baibeike.com/*","*://*.blog.csdn.net/*","*://*.bilibili.com/read/*","*://*.cnki.net/KXReader/*","*://*.cnrencai.com/*","*://*.kodiplayer.cn/*","*://tongxiehui.net/*","*://*.jianshu.com/p/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":["res3.doc88.com"],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null}},"storage":{"ts":1661936236503,"data":{}},"enabled":true,"position":12,"file_url":"https://greasyfork.org/scripts/405130-%E6%96%87%E6%9C%AC%E9%80%89%E4%B8%AD%E5%A4%8D%E5%88%B6/code/%F0%9F%94%A5%F0%9F%94%A5%F0%9F%94%A5%E6%96%87%E6%9C%AC%E9%80%89%E4%B8%AD%E5%A4%8D%E5%88%B6%F0%9F%94%A5%F0%9F%94%A5%F0%9F%94%A5.user.js","uuid":"1e625a29-8c37-41ae-850c-fc439aad9b74","source":"","requires":[{"meta":{"name":"jquery.min.js","url":"https://lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/jquery/3.6.0/jquery.min.js","ts":1661936236499,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"clipboard.min.js","url":"https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/clipboard.js/2.0.10/clipboard.min.js","ts":1661936236497,"mimetype":"text/javascript"},"source":""}]},{"name":"秀米补丁","options":{"check_for_updates":false,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"compat_powerful_this":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*xiumi.us/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1661936236465,"data":{}},"enabled":false,"position":13,"uuid":"f4d34ee2-5a62-4a6f-9013-ef3ce4d45c81","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDnp4DnsbPooaXkuIEKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vdGFtcGVybW9ua2V5Lm5ldC8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICB0cnkgdG8gdGFrZSBvdmVyIHRoZSB3b3JsZCEKLy8gQGF1dGhvciAgICAgICBZb3UKLy8gQG1hdGNoICAgICAgICAqeGl1bWkudXMvKgovLyBAaWNvbiAgICAgICAgIGh0dHBzOi8vc3RjLnhpdW1pLnVzL2ltYWdlcy9iODBjZDgueGl1bWlfbG9nb180MC5wbmcKLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uKCQpIHsKd2luZG93Lm9ubG9hZCA9wqBmdW5jdGlvbigpewoKdmFyIGRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoInRuLW9wLWJ0bi1ncm91cCBuZy1zY29wZSIpWzBdOwp2YXIgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYnV0dG9uIik7LyrliJvlu7rkuIDkuKroioLngrkqLwpidXR0b24uc2V0QXR0cmlidXRlKCJzdHlsZSIsICJiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1IDI1NSAyNTUgLyAwJSk7IHdpZHRoOiA0Ni45cHg7aGVpZ2h0OiA0Ni45cHg7Y29sb3I6IzAwODlmZjAwO21hcmdpbjowIGF1dG87Ym9yZGVyLXJhZGl1czogMjVweDtib3JkZXI6IDJweCBzb2xpZCAjYzBjMmM1O2JhY2tncm91bmQtaW1hZ2U6IHVybChodHRwczovL2dpbWcyLmJhaWR1LmNvbS9pbWFnZV9zZWFyY2gvc3JjPWh0dHAlM0ElMkYlMkZjLXNzbC5kdWl0YW5nLmNvbSUyRnVwbG9hZHMlMkZpdGVtJTJGMjAyMDA0JTJGMzAlMkYyMDIwMDQzMDAwNTQyMl9jam5reS50aHVtYi40MDBfMC5naWYmcmVmZXI9aHR0cCUzQSUyRiUyRmMtc3NsLmR1aXRhbmcuY29tJmFwcD0yMDAyJnNpemU9Zjk5OTksMTAwMDAmcT1hODAmbj0wJmc9MG4mZm10PWpwZWc/c2VjPTE2NDg0NzkzMDYmdD1iZDg4YmEyODEzMzFiOGYzZTEyM2JkOWEyZmY2NzEzMik7IGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7ICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47YmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjsiKTsKLy9idXR0b24uc2V0QXR0cmlidXRlKCJjbGFzcyIsICJidG4taW1nIG9wLWJ0biBvcGVuIik7Ci8vYnV0dG9uLnNldEF0dHJpYnV0ZSgiYmFja2dyb3VuZC1pbWFnZSIsICJodHRwczovL2dpbWcyLmJhaWR1LmNvbS9pbWFnZV9zZWFyY2gvc3JjPWh0dHAlM0ElMkYlMkZjLXNzbC5kdWl0YW5nLmNvbSUyRnVwbG9hZHMlMkZpdGVtJTJGMjAyMDA0JTJGMzAlMkYyMDIwMDQzMDAwNTQyMl9jam5reS50aHVtYi40MDBfMC5naWYmcmVmZXI9aHR0cCUzQSUyRiUyRmMtc3NsLmR1aXRhbmcuY29tJmFwcD0yMDAyJnNpemU9Zjk5OTksMTAwMDAmcT1hODAmbj0wJmc9MG4mZm10PWpwZWc/c2VjPTE2NDg0NzkzMDYmdD1iZDg4YmEyODEzMzFiOGYzZTEyM2JkOWEyZmY2NzEzMiIpOwovL2J1dHRvbi5zZXRBdHRyaWJ1dGUoImlkIiwgInFjc3kiKTsKYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY29weUNvbnRlbnQpOwovL2Rpdi5hcHBlbmRDaGlsZChidXR0b24pOwp2YXIgY2wxID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiYnRuLWltZyBvcC1idG4gb3BlbiIpWzBdOwpkaXYuaW5zZXJ0QmVmb3JlKGJ1dHRvbiwgY2wxKTsKLy9kaXYuaW5zZXJ0KGJ1dHRvbjEpOwoKICAgIC8qKgp2YXIgY2wxID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiYnRuLWltZyBvcC1idG4gb3BlbiIpWzBdOwogICAgLy9jb25zb2xlLmxvZyhjbDEpCiAgICBjbDEuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjb3B5Q29udGVudCk7CnZhciBibnQxID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgib3AtYnRuLWluc2V0LWRlc2MiKVswXTsKICAgIGJudDEuaW5uZXJIVE1MPSLlpI3liLYiCioqLwpmdW5jdGlvbiBjb3B5Q29udGVudCAoKSB7CiAgICAgZnVuY3Rpb24gbXBvcnQgKCkgewogICAgIHZhciBCdG5fc2F2ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImJ0bi1pbWcgb3AtYnRuIGRvbmUgZHJvcGRvd24tdG9nZ2xlIilbMF07CiAgICAgIGlmIChCdG5fc2F2ZS5jbGFzc05hbWUgPT0gImJ0bi1pbWcgb3AtYnRuIGRvbmUgZHJvcGRvd24tdG9nZ2xlIikgewogICAgICAgICAgICBCdG5fc2F2ZS5jbGljaygpO30KICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICB2YXIgQnRuMiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImdseXBoaWNvbiBnbHlwaGljb24tbmV3LXdpbmRvdyIpWzBdOwogICAgICAgICAgICBpZiAoQnRuMi5jbGFzc05hbWUgPT0gImdseXBoaWNvbiBnbHlwaGljb24tbmV3LXdpbmRvdyIpIHsKICAgICAgICAgICAgQnRuMi5jbGljaygpO319LDMwMCk7CiAgICAgIH07CgogICAgZnVuY3Rpb24gVG9hc3QobXNnLGR1cmF0aW9uKXsKICAgIGR1cmF0aW9uPWlzTmFOKGR1cmF0aW9uKT8zMDAwOmR1cmF0aW9uOwogICAgdmFyIG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgIG0uaW5uZXJIVE1MID0gbXNnOwogICAgbS5zdHlsZS5jc3NUZXh0PSJmb250LXNpemU6IDE4cHg7Y29sb3I6IHJnYigyNTUsIDI1NSwgMjU1KTtiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNik7cGFkZGluZzogMjBweCAyNXB4O21hcmdpbjogMCAwIDAgLTYwcHg7Ym9yZGVyLXJhZGl1czogNHB4O3Bvc2l0aW9uOiBmaXhlZDsgICAgdG9wOiA1MCU7bGVmdDogNTAlO3dpZHRoOiAyNjBweDt0ZXh0LWFsaWduOiBjZW50ZXI7IjsKICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobSk7CiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBkID0gMC41OwogICAgICAgIG0uc3R5bGUub3BhY2l0eSA9ICcwJzsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKG0pIH0sIGQgKiAxMDAwKTsKICAgIH0sIGR1cmF0aW9uKTsKfQoKICBmdW5jdGlvbiBzcGxpdCAoKSB7CiAgICB2YXIgaHRtbCA9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmlubmVySFRNTDsKICAgIHZhciBzMT0idW5zYWZlXCI+Jm5ic3A7IjsKICAgIHZhciBzMj0gIiZuYnNwOzwvZGl2IjsKICAgIHZhciBodG1sMiA9IGh0bWwuc3BsaXQoczEpWzFdOwogICAgdmFyIHNlY3Rpb24gPSBodG1sMi5zcGxpdChzMilbMF07CiAgICByZXR1cm4gc2VjdGlvbjsKICAgfTsKICB0cnkgewogICAgdW5kZWZpbmVkCiAgICAvL+WPr+iDveS8muWvvOiHtOmUmeivr+eahOS7o+eggQogICAgc3BsaXQoKTsKICAgIH0KICBjYXRjaCAoZXJyb3IpCiAgICB7CiAgICAgIHVuZGVmaW5lZAogICAgICAvL2FsZXJ0KCLor7flhYjlm7rlrprnvJbovpHljLrvvIEiKQogICAgICBtcG9ydCAoKTsKICAgICAgfQogIHZhciBzZWN0aW9uID0gc3BsaXQoKTsKICBsZXQgdmFsID0gc2VjdGlvbjsKICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjb3B5Jywgc2F2ZSk7IC8vIOebkeWQrOa1j+iniOWZqGNvcHnkuovku7YKICBkb2N1bWVudC5leGVjQ29tbWFuZCgnY29weScpOyAvLyDmiafooYxjb3B55LqL5Lu277yM6L+Z5pe255uR5ZCs5Ye95pWw5Lya5omn6KGMc2F2ZeWHveaVsOOAggogIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvcHknLCBzYXZlKTsgLy8g56e76ZmkY29weeS6i+S7tgogIC8vIOS/neWtmOaWueazlQogIGZ1bmN0aW9uIHNhdmUoZSkgewogICAgZS5jbGlwYm9hcmREYXRhLnNldERhdGEoJ3RleHQvcGxhaW4nLCB2YWwpOyAvLyDliarotLTmnb/lhoXlrrnorr7nva4KICAgIGUucHJldmVudERlZmF1bHQoKTsKICB9CiAgICBUb2FzdCgn5o+Q56S677ya5Luj56CB5aSN5Yi25oiQ5Yqf77yB77yBJywxMDAwKTsKfQp9Cn0pKGpRdWVyeSk7CgoKLyoqCihmdW5jdGlvbigpIHsKd2luZG93Lm9ubG9hZCA9wqBmdW5jdGlvbigpewp2YXIgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgidG4tb3AtYnRuLWdyb3VwIG5nLXNjb3BlIilbMF07CmRpdi5pbm5lckhUTUwgPSAnJzt9Cn0pKCk7CgooZnVuY3Rpb24oICQgKSB7CiAgICB2YXIgZGl2PSI8ZGl2IHN0eWxlPSd3aWR0aDogNTBweDsgaGVpZ2h0OiA1MHB4OyBwb3NpdGlvbjogZml4ZWQ7IHRvcDogMDsgbGVmdDogMDsgei1pbmRleDogOTk5OTk7b3ZlcmZsb3c6IHZpc2libGU7Jz48YnV0dG9uIGlkPSdxY3N5JyBzdHlsZT0nYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1NSAyNTUgMjU1IC8gMCUpOyB3aWR0aDogNTBweDtoZWlnaHQ6IDUwcHg7Y29sb3I6IzAwODlmZjAwO21hcmdpbi1sZWZ0OiAxMHB4O2JvcmRlci1yYWRpdXM6IDI1cHg7Ym9yZGVyOiAxcHggc29saWQgI2ZmZmZmZjtiYWNrZ3JvdW5kLWltYWdlOiB1cmwoaHR0cHM6Ly9naW1nMi5iYWlkdS5jb20vaW1hZ2Vfc2VhcmNoL3NyYz1odHRwJTNBJTJGJTJGYy1zc2wuZHVpdGFuZy5jb20lMkZ1cGxvYWRzJTJGaXRlbSUyRjIwMjAwNCUyRjMwJTJGMjAyMDA0MzAwMDU0MjJfY2pua3kudGh1bWIuNDAwXzAuZ2lmJnJlZmVyPWh0dHAlM0ElMkYlMkZjLXNzbC5kdWl0YW5nLmNvbSZhcHA9MjAwMiZzaXplPWY5OTk5LDEwMDAwJnE9YTgwJm49MCZnPTBuJmZtdD1qcGVnP3NlYz0xNjQ4NDc5MzA2JnQ9YmQ4OGJhMjgxMzMxYjhmM2UxMjNiZDlhMmZmNjcxMzIpOyBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OyBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgY2VudGVyOyc+5aSN5Yi25Luj56CBPC9idXR0b24+PC9kaXY+IjsKICAgICQoInRuLW9wLWJ0bi1ncm91cCBuZy1zY29wZSIpLnByZXBlbmQoZGl2KTsKCn0pKCk7CioqLw=="},{"name":"检查微信公众号的错字","options":{"check_for_updates":false,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"compat_powerful_this":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*mp.weixin.qq.com/cgi-bin/appmsg?t=media/appmsg_edit&action=edit&type*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"orig_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1661936236464,"data":{}},"enabled":true,"position":14,"uuid":"863028d1-33b0-48e1-a012-313e703a7a13","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDmo4Dmn6Xlvq7kv6HlhazkvJflj7fnmoTplJnlrZcKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vdGFtcGVybW9ua2V5Lm5ldC8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICB0cnkgdG8gdGFrZSBvdmVyIHRoZSB3b3JsZCEKLy8gQGF1dGhvciAgICAgICBMRU5HTkFTQQovLyBAbWF0Y2ggICAgICAgICptcC53ZWl4aW4ucXEuY29tL2NnaS1iaW4vYXBwbXNnP3Q9bWVkaWEvYXBwbXNnX2VkaXQmYWN0aW9uPWVkaXQmdHlwZSoKLy8gQGljb24gICAgICAgICBodHRwczovL3Jlcy53eC5xcS5jb20vYS9mZWRfdXBsb2FkLzkzMDBlN2FjLWNlYzUtNDQ1NC1iNzVjLWY5MjI2MGRkNWI0Ny9sb2dvLW1wLmljbwovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7Cgp2YXIgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgid2V1aS1kZXNrdG9wLW9ubGluZS1mYXFfX3dycCIpWzBdOwogICAgZGl2LmlubmVySFRNTD0iPGRpdiBjbGFzcz1cIndldWktZGVza3RvcC1vbmxpbmUtZmFxXCIgb25jbGljaz1cIndpbmRvdy5vcGVuKCdodHRwczovL3hpZXp1b2NhdC5jb20vIy9wcm8vMjUwMDIyMzInKVwiPjxkaXYgY2xhc3M9XCJ3ZXVpLWRlc2t0b3Atb25saW5lLWZhcV9faW5uZXJcIj48ZGl2IGNsYXNzPVwid2V1aS1kZXNrdG9wLW9ubGluZS1mYXFfX3N3aXRjaFwiIHN0eWxlPVwiYm9yZGVyLXJhZGl1czogNHB4O1wiPjwhLS0tLT4gPGRpdiBjbGFzcz1cIndldWktZGVza3RvcC1vbmxpbmUtZmFxX19zd2l0Y2hfY29udGVudFwiIHN0eWxlPVwiYm9yZGVyLXJhZGl1czogNHB4O1wiPjxzdmcgdD1cIjE2NjE5MTAzMTQzODNcIiBjbGFzcz1cImljb25cIiBzdHlsZT1cIndpZHRoOiAxLjVlbTtoZWlnaHQ6IDEuNWVtO3ZlcnRpY2FsLWFsaWduOiBtaWRkbGU7ZmlsbDogY3VycmVudENvbG9yO292ZXJmbG93OiBoaWRkZW47XCIgdmlld0JveD1cIjAgMCAxMDI0IDEwMjRcIiB2ZXJzaW9uPVwiMS4xXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHAtaWQ9XCI4NjIwXCIgZGF0YS1zcG0tYW5jaG9yLWlkPVwiYTMxM3guNzc4MTA2OS4wLmkwXCI+PHBhdGggZD1cIk04NjIuNiAxMjkuNGwwLjEgMC4xVjg5N2wtMC4xIDAuMUgxNjAuOGwtMC4xLTAuMVYxMjkuNWwwLjEtMC4xaDcwMS44bTAuMS02NGgtNzAyYy0zNS4yIDAtNjQgMjguOC02NCA2NHY3NjcuN2MwIDM1LjIgMjguOCA2NCA2NCA2NGg3MDJjMzUuMiAwIDY0LTI4LjggNjQtNjRWMTI5LjRjMC0zNS4yLTI4LjgtNjQtNjQtNjR6XCIgcC1pZD1cIjg2MjFcIj48L3BhdGg+PHBhdGggZD1cIk03MDIuMSAyODkuNUgzMTguOGMtMTcuNyAwLTMyLTE0LjMtMzItMzJzMTQuMy0zMiAzMi0zMmgzODMuM2MxNy43IDAgMzIgMTQuMyAzMiAzMnMtMTQuNCAzMi0zMiAzMnpNNzAyLjEgNDE3LjNIMzE4LjhjLTE3LjcgMC0zMi0xNC4zLTMyLTMyczE0LjMtMzIgMzItMzJoMzgzLjNjMTcuNyAwIDMyIDE0LjMgMzIgMzJzLTE0LjQgMzItMzIgMzJ6TTQ0Ni44IDU0Ni41aC0xMjhjLTE3LjcgMC0zMi0xNC4zLTMyLTMyczE0LjMtMzIgMzItMzJoMTI4YzE3LjcgMCAzMiAxNC4zIDMyIDMycy0xNC4zIDMyLTMyIDMyek02MzkuNCA3NzQuMmMtNzIuOSAwLTEzMi4yLTU5LjMtMTMyLjItMTMyLjJzNTkuMy0xMzIuMiAxMzIuMi0xMzIuMlM3NzEuNyA1NjkgNzcxLjcgNjQxLjlzLTU5LjMgMTMyLjMtMTMyLjMgMTMyLjN6IG0wLTIxNC41Yy00NS40IDAtODIuMiAzNi45LTgyLjIgODIuMnMzNi45IDgyLjIgODIuMiA4Mi4yIDgyLjItMzYuOSA4Mi4yLTgyLjItMzYuOC04Mi4yLTgyLjItODIuMnpcIiBwLWlkPVwiODYyMlwiIGRhdGEtc3BtLWFuY2hvci1pZD1cImEzMTN4Ljc3ODEwNjkuMC5pMVwiIGNsYXNzPVwiXCI+PC9wYXRoPjxwYXRoIGQ9XCJNODA2LjMgODMzLjNjLTYuNCAwLTEyLjgtMi40LTE3LjctNy4zbC04NS4zLTg1LjVjLTkuOC05LjgtOS43LTI1LjYgMC0zNS40IDkuOC05LjggMjUuNi05LjcgMzUuNCAwbDg1LjMgODUuNWM5LjggOS44IDkuNyAyNS42IDAgMzUuNC00LjkgNC44LTExLjMgNy4zLTE3LjcgNy4zelwiIHAtaWQ9XCI4NjIzXCI+PC9wYXRoPjwvc3ZnPiA8YSBzdHlsZT1cImZvbnQtc2l6ZTogMTRweDtjb2xvcjogcmdiKDc2LCA3NywgNzgpO2xpbmUtaGVpZ2h0OiAxOS42cHg7XCIgaHJlZj1cImh0dHBzOi8veGllenVvY2F0LmNvbS8jL3Byby8yNTAwMjIzMlwiIHRhcmdldD1cIl9ibGFua1wiPuajgCDmn6XlhoUg5a65PC9hPiA8L2Rpdj48L2Rpdj48L2Rpdj48L2Rpdj4iCn0pKCk7"}]}
